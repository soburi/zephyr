--- tokita/main.ccp       2024-02-16 19:15:38.691375940 +0900
+++ main.cpp       2024-02-16 20:41:11.179367750 +0900
@@ -11,8 +11,8 @@
 #include "mbed.h"
 #include <math.h>
 
-#define VMAX_SET  1.0/*PI制御最大電圧指令0.0～1.0*/
-#define IMAX_SET  0.4/* PI制御最大電流指令0.0～1.0*/
+#define VMAX_SET  1.0f/*PI制御最大電圧指令0.0～1.0*/
+#define IMAX_SET  0.4f/* PI制御最大電流指令0.0～1.0*/
 
 /**********PI制御周期設定*********************/
 /***コメントアウトでPI周期制御無し***********/
@@ -47,14 +47,14 @@
 
 DigitalIn Direction(PB_8);
 
-Timer uTimer;
-Timer vTimer;
-Timer wTimer;
-Timer Timer1;
+Timer uTimer(DEVICE_DT_GET(DT_NODELABEL(adc1)));
+Timer vTimer(DEVICE_DT_GET(DT_NODELABEL(adc1)));
+Timer wTimer(DEVICE_DT_GET(DT_NODELABEL(adc1)));
+Timer Timer1(DEVICE_DT_GET(DT_NODELABEL(adc1)));
 
-AnalogOut SWAVE(PA_4);
+//AnalogOut SWAVE(PA_4);
 
-Serial pc(USBTX,USBRX);
+//Serial pc(USBTX,USBRX);
 
 DigitalOut myled(LED1);
 
@@ -360,7 +360,7 @@
   }
   /***********************************/
   void Current_PI(){
- I_diff = (I_PI - (I_detect-0.5))*I_PII;
+ I_diff = (I_PI - (I_detect-0.5f))*I_PII;
      s_kiCurrent += kiCurrent*(I_diff);
      if(s_kiCurrent > VMAX_SET)
      {
@@ -404,7 +404,7 @@
 
      PWM_W.period_us(25);
 
-    pc.baud(128000);
+    //pc.baud(128000);
 
      wait_ms(500);
      Vr_adc_i=V_adc.read();
@@ -426,11 +426,11 @@
     vr_ad=V_adc.read();
     vr1_ad_p=(vr_ad-Vr_adc_i); //ボリュームを使う場合
     //vr1_ad_p=(vr_ad-Vr_adc_i)*1.3; //カート・キットのアクセルを使う場合
-   vr1_ad+=(vr1_ad_p-vr1_ad)*0.2;//0.1
+   vr1_ad+=(vr1_ad_p-vr1_ad)*0.2f;//0.1
 
      Timer_cnt_start = uTimer.read_us(); /* カウンタ値 */
 
-    if(fabs(vr1_ad)<0.1f)
+    if(fabsf(vr1_ad)<0.1f)
      {
 
          Speed_SET = 0.0;
@@ -475,9 +475,9 @@
 
        }
 
-      curr_u += ((curr_ub) - curr_u )*0.1;
-      curr_v += ((curr_vb) - curr_v )*0.1;
-      curr_w += ((curr_wb) - curr_w )*0.1;
+      curr_u += ((curr_ub) - curr_u )*0.1f;
+      curr_v += ((curr_vb) - curr_v )*0.1f;
+      curr_w += ((curr_wb) - curr_w )*0.1f;
 
 
 /* *********************************************** */
@@ -510,7 +510,7 @@
   /* [ 2 ] 速度制御 ↓ */
   /* *********************************************** */
 
-    Speed_SET0 = fabs(Speed_MAX*vr1_ad);
+    Speed_SET0 = fabsf(Speed_MAX*vr1_ad);
       if(Speed_SET0>0){
          if(Speed_now > Speed_SET0)
          {
@@ -628,7 +628,7 @@
      /* ----------- */
 
   if(Cu_tick==0){
-    I_diff = (I_PI - (I_detect-0.5))*I_PII;
+    I_diff = (I_PI - (I_detect-0.5f))*I_PII;
      s_kiCurrent += kiCurrent*I_diff;
      if(s_kiCurrent > VMAX_SET)
      {
@@ -662,10 +662,10 @@
 
    /****************OOPTION4**********************/
    /**********Speed  Current  PWMDuty Control*********/
-      I_PII=1.0;        // Speed or Duty Control
+      I_PII=1.0f;        // Speed or Duty Control
        //I_PII=fabs(vr1_ad);//Current Control
        //PWMDuty = Vpi;// 0.381667 Speed or Current Control
-      PWMDuty=fabs(vr1_ad)*Vpi; //Duty Control
+      PWMDuty=fabsf(vr1_ad)*Vpi; //Duty Control
    /**************************************************/
 
    if(kaiten<change_pwm_N){
@@ -675,13 +675,13 @@
            }
 
 if(acc_vol==0){   //volume
-    if(vr1_ad>0.1){
+    if(vr1_ad>0.1f){
            Direct_R=0;
 
          }else{
              }
 
-     if(vr1_ad<-0.1){
+     if(vr1_ad<-0.1f){
            Direct_R=1;
 
          }else{
